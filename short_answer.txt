Before submitting this file, make sure that there are no more TODO
placeholders remaining in the file (and remove this comment too).

Perfect Numbers
---------------

Before submitting this file, make sure that there are no more TODO
placeholders remaining in the file (and remove this comment too).

Q1. Roughly how long did it take your computer to do the search? How many perfect numbers were found and what were they?
A1. It take my computer 1.327seconds to do the search. 4 perfect number were found and they were 6, 28, 496, and 8128.

Q2. Record the timing results for `findPerfects` that you observed into a table.
A2.  size =    10000   completed in    0.560 secs
        size =    20000   completed in    0.810 secs
        size =    40000   completed in    1.760 secs
        size =    80000   completed in    5.240 secs

Q3. Does it take the same amount of work to compute `isPerfect` on the number 10 as it does on the number 1000? Why or why not? Does it take the same amount of work for `findPerfects` to search the range of numbers from 1-1000 as it does to search the numbers from 1000-2000? Why or why not?
A3. The  amount of work to compute `isPerfect` on the number 10 is not the same as it does on the number 1000. Because `isPerfect` calls 'divisorSum' 1000 times on the number 1000, while it ocnly calls 'divisorSum' 10 times.
      The  amount of work for `findPerfects` to search the range of numbers from 1-1000 is not the same as it does to search the numbers from 1000-2000. Because in 'divisorSum' it always searching from divisor =1 to n.

Q4. Extrapolate from the data you gathered and make a prediction: how long will it take `findPerfects` to reach the fifth perfect number?
A4. TODO

Q5. Do any of the tests still pass even with this broken function? Why or why not?
A5. "Confirm 12 and 98765 are not perfect" and "Time trials of findPerfects on doubling input sizes" passed. The rest tests all failed.
       Although the "divisorsum function" has an error, it only affects the "true case when a number is a perfect number" and does not affect other cases.      

Q6. Describe the testing strategy you used for your test cases to confirm `smarterSum` is working correctly.
A6. We test the cases where the parameter n is positive, negative and 0 in turn, and call "divisorSum" to judge whether the result of "smarterSum" is consistent with the result of "divisorSum".

Q7. Record your timing results for `findPerfectsSmarter` into a table.
A7.  size =    20000   completed in    0.349 secs
        size =    40000   completed in    0.746 secs
        size =    80000   completed in    2.297 secs

Q8. Make a prediction: how long will `findPerfectsSmarter` take to reach the fifth perfect number?
A8. TODO

Q9. Explain how you chose your specific test cases and why they lead you to be confident `findNthPerfectEuclid` is working correctly.
A9. Test the results when N in findNthPerfectEuclid is 1 to 5 to be true in turn, and compare the found values with the standard values to ensure consistency. Also, the result is false when N is negative and zero.

Soundex
-------

Q10. What is the Soundex code for "Angelou"? What is the code for your own surname?
A10. The Soundex code for "Angelou" is A524;   The Soundex code for my own name 'Junyu' is 'J500'.

Q11. Before writing any code, brainstorm your plan of attack and sketch how you might decompose the work into smaller tasks. Briefly describe your decomposition strategy.
A11. 1.remove all the non-letter charachers in string 's';
         2.convert all the letters in string 's' to Upper Characters;
         3.convert all the letters in string 's' to digits follow the rules in the table;
         4.Merge adjacent repeating numbers;
         5.Replace the first digit with the first letter of the name and convert to uppercase;
         6.Remove all '0' from the string;
         7.Make the encoded length exactly 4 by padding with 0 or truncating the excess

Q12. Think about one or more examples of a class of names that the Soundex system might not work well for. Explain what this class of names is and why the system might incorrectly group them or mis-categorize one of the names.
A12. 1.complete the code that remove all the non-letter charachers in string 's';
         2.complete the code that convert all the letters in string 's' to Upper Characters;
         3.complete the code that convert all the letters in string 's' to digits follow the rules in the table;
         4.the rest function could be achieved in function soundex.

Q13. Suppose you are a software engineer working for the U.S. government. You have been tasked with implementing a system that collects names as part of the Census survey and analyzes these names using a phonetic algorithm. Your boss suggests using Soundex and notes that the algorithm is only expected to work for ASCII-encoded strings, since supporting Unicode would require extra work and time. What would your response be and why? What representational harms might result from building a system that exclusively uses Soundex and/or ASCII?
A13. TODO


